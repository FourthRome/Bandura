@page "/"

@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@using BlazorImp.Data
@implements IDisposable
@inject IDbContextFactory<BlazorImpContext> DbFactory


@if (SessionInfo.UserID == null)
{
    <div class="page">
        <div class="main">
            <div class="login-box">
                @if (IncorrectLoginData)
                {
                    <p style="color: red;">Неверные номер участника и/или пароль; попробуйте снова.</p>
                }

                <label class="vertical-label" for="answer">Номер участника:</label>
                <input type="text" id="answer" name="answer" @bind=UserLogin @bind:event="oninput"/>

                <label class="vertical-label" for="answer">Пароль:</label>
                <input type="password" id="password" name="password" @bind=UserPassword @bind:event="oninput"/>

                <button type="button" disabled=@(UserLogin == "" || UserPassword == "" || SendingData) @onclick="OnLoginButtonClick">Войти</button>
            </div>
        </div>
    </div>
}
else if (SessionInfo.CourseID == 0)
{
    <div class="page">
        <div class="main">
            <div class="main-page">
                @foreach (Course course in UserCourses)
                {
                    <div class="main-page-item" @onclick=@(() => OnPickCourse(course.CourseID))>@course.Name</div>
                }
            </div>
        </div>
    </div>
}
else
{
    <!-- TODO: Is this recreating object and all its contents every time? -->
    <CourseComponent CourseID=SessionInfo.CourseID SessionInfo=SessionInfo/>
}

@code {
    //--------------------------------------------
    // Properties that map to UI elements directly
    //--------------------------------------------
    public string UserLogin { get; set; } = "";
    public string UserPassword { get; set; } = "";

    //-------------------------------------
    // Properties that affect UI implicitly
    //-------------------------------------
    private bool SendingData { get; set; } = false;
    private bool IncorrectLoginData { get; set; } = false;

    //-------------------------------------
    // Properties that are related to logic
    //-------------------------------------
    private SessionInfo SessionInfo { get; set; }
    private List<Course> UserCourses { get; set; }


    // The following block is written according to the accepted answer here:
    // https://forums.asp.net/t/2169296.aspx?server+blazor+Handle+event+when+a+user+left+the+page
    // START
    private bool _disposed = false;

    public void Dispose() => Dispose(true);

    public void Dispose(bool disposing)
    {
        if (_disposed)
        {
            return;
        }

        if (disposing && SessionInfo.UserID != null)
        {
            var context = DbFactory.CreateDbContext();

            UserAction action = new()
            {
                CourseID = SessionInfo.CourseID,
                UserID = SessionInfo.UserID.GetValueOrDefault(),  // TODO: It's never default here, make it explicit
                SourcePageID = null,
                DestinationPageID = null,
                Type = ActionType.Logout,
                Timestamp = DateTime.UtcNow,
                Message = "User left the website"
            };
            context.UserActions.Add(action);
            context.SaveChanges();
        }
    }
    // END

    //---------------
    // Event handlers
    //---------------
    protected override async Task OnInitializedAsync()
    {
        // TODO: SessionInfo consists of information shared between
        // different components, and shared implicitly. This is
        // bad design, find a way to share information in a more direct
        // manner
        SessionInfo = new();
        UserCourses = new();
    }

    private async Task OnLoginButtonClick()
    {
        // TODO: Is there an approach similar to 'using' keyword for this task?
        SendingData = true;
        IncorrectLoginData = false;

        var context = DbFactory.CreateDbContext();

        var user = await context.Users.Where(
                u =>
                u.Login == UserLogin &&
                u.Password == UserPassword)
                .FirstOrDefaultAsync();

        if (user != null)
        {
            SessionInfo.UserID = user.UserID;
            UserAction action = new UserAction
            {
                CourseID = 0,
                UserID = user.UserID,
                SourcePageID = null,
                DestinationPageID = null,
                Type = ActionType.Login,
                Timestamp = DateTime.UtcNow,
                Message = "Successful login"
            };
            context.UserActions.Add(action);
            await context.SaveChangesAsync();
            await LoadUserCourses();
        }
        else
        {
            IncorrectLoginData = true;
        }

        SendingData = false;
    }


    private async Task LoadUserCourses()
    {
        var context = DbFactory.CreateDbContext();

        var courseIDsQuery = from membership in context.CourseMemberships
                             where membership.UserID == SessionInfo.UserID
                             select membership.CourseID;

        // TODO: Find a way to replace list with set directly
        HashSet<int> courseIDsSet = new(courseIDsQuery);

        var courses = await context.Courses.Where(
                c =>
                courseIDsSet.Contains(c.CourseID))
                .ToListAsync();

        courses.Sort((x, y) =>  x.Name.CompareTo(y.Name));
        UserCourses = courses;
    }

    private async Task OnPickCourse(int courseID)
    {
        var context = DbFactory.CreateDbContext();

        UserAction action = new UserAction
        {
            CourseID = courseID,
            UserID = SessionInfo.UserID.GetValueOrDefault(), // TODO: It's never really default; make that explicit
            SourcePageID = null,
            DestinationPageID = null,
            Type = ActionType.EnterCourse,
            Timestamp = DateTime.UtcNow,
            Message = "Entering the course"
        };
        context.UserActions.Add(action);
        await context.SaveChangesAsync();

        SessionInfo.CourseID = courseID;
    }
}
