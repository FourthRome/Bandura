@page "/TaskPage"
@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@inject IDbContextFactory<BlazorImpContext> DbFactory


<div class="main-container">
    <h2>@((MarkupString)Header)</h2>

    <p class="task-text">@((MarkupString)TaskText)</p>


    @if (AnswerCorrectness == false)
    {
        if (AnswerAttemptsLeft > 0)
        {
            <p style="color:red;">Неверный ответ; пожалуйста, попробуйте ещё.</p>
        }
        else
        {
            <h4 style="color:red;">Неверный ответ.</h4>
        }
    }
    else if (AnswerCorrectness == true)
    {
        <h4 style="color:forestgreen;">Правильно!</h4>
    }

    <div style="font-size:larger">
        <label for="comment" class="vertical-label">Пожалуйста, распишите своё решение по шагам:</label>
        <textarea disabled=@(SendingData || AnswerAttemptsLeft <= 0 || AnswerCorrectness == true) id="comment" rows="7" @bind=UserComment @bind:event="oninput" />
    </div>

    <div style="font-size:larger">
        <label for="answer" class="vertical-label">Ваш ответ:</label>
        <input type="text" disabled=@(SendingData || AnswerAttemptsLeft <= 0 || AnswerCorrectness == true) id="answer" @bind=UserAnswer @bind:event="oninput" />
    </div>


    @if (AnswerAttemptsLeft <= 0 || AnswerCorrectness == true)
    {
        <button type="button" @onclick=ButtonOnClick>Продолжить</button>
    }
    else
    {
        @if (AnswerCorrectness != true)
        {
            <h4>Осталось попыток: @AnswerAttemptsLeft</h4>
        }
        <button type="button" disabled=@(SendingData || UserComment == "" || UserAnswer == "") @onclick=SendAnswer>Ответить</button>
    }

</div>

@code {
    //--------------------------------------------
    // Properties that map to UI elements directly
    //--------------------------------------------
    private string Header { get; set; } = "Task page";
    private string TaskText { get; set; } = "What is the answer?";
    private string UserAnswer { get; set; } = "";
    private string UserComment { get; set; } = "";

    //-------------------------------------
    // Properties that affect UI implicitly
    //-------------------------------------
    private int AnswerAttemptsLeft { get; set; }
    private bool SendingData { get; set; }
    private bool? AnswerCorrectness { get; set; }

    //-------------------------------------
    // Properties that are related to logic
    //-------------------------------------
    [Parameter]
    public TaskPageModel Model { get; set; }
    [Parameter]
    public SessionInfo SessionInfo { get; set; }
    [Parameter]
    public EventCallback<Task> GoToNextStep { get; set; }
    private int AttemptNumber { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // Map Model's data to UI
        Header = Model.Header;
        TaskText = Model.TaskText;

        AnswerAttemptsLeft = Model.AttemptNumberConstraint;

        var context = DbFactory.CreateDbContext();

        var prevAttempt = await context.TaskAttempts
            .Where(
                a =>
                a.CourseID == SessionInfo.CourseID &&
                a.TaskPageModelID == Model.TaskPageModelID &&
                a.UserID == SessionInfo.UserID)
            .OrderByDescending(
                a =>
                a.AttemptNumber)
            .FirstOrDefaultAsync();

        if (prevAttempt != null)
        {
            AnswerAttemptsLeft -= prevAttempt.AttemptNumber;
            AttemptNumber = prevAttempt.AttemptNumber + 1;
            AnswerCorrectness = prevAttempt.Correct;
            UserAnswer = prevAttempt.UserAnswer;
            UserComment = prevAttempt.UserComment;
        }
        else
        {
            AttemptNumber = 1;
            SendingData = false;
            AnswerCorrectness = null;
            UserAnswer = "";
            UserComment = "";
        }
    }

    private async Task SendAnswer()
    {
        if (AnswerAttemptsLeft <= 0)
        {
            return;
        }

        // TODO: This is smely code, find a fix
        SendingData = true;

        var context = DbFactory.CreateDbContext();

        if (!SessionInfo.UserID.HasValue)
        {
            throw new ArgumentException("UserID is empty on form submission");
        }

        // TODO: Eliminate potential race condition (what if the database has changed?)
        AnswerCorrectness = Model.RightAnswer == UserAnswer;

        // TODO: Find a way to make the cast explicitly throwing exception
        // as null UserID should never appear here, but is checked
        // in the code above instead of here
        TaskAttempt attempt = new TaskAttempt()
        {
            CourseID = SessionInfo.CourseID,
            TaskPageModelID = Model.TaskPageModelID,
            AttemptNumber = AttemptNumber,
            UserAnswer = UserAnswer,
            UserComment = UserComment,
            Correct = AnswerCorrectness ?? false,
            UserID = SessionInfo.UserID.GetValueOrDefault(),
        };

        context.TaskAttempts.Add(attempt);
        await context.SaveChangesAsync();

        // Save stat
        // TODO: Add a method to the SessionInfo class to retrieve info
        // about current Page more easily
        PageStat stat = await context.PageStats.Where(
                s =>
                s.CourseID == SessionInfo.CourseID &&
                s.UserID == SessionInfo.UserID &&
                s.PageID == SessionInfo.FlatCourseTree[SessionInfo.StepNumber].PageID)
                .FirstOrDefaultAsync();

        if (stat != null)
        {
            stat.CorrectAnswerGiven = AnswerCorrectness ?? false;
        }
        else
        {
            stat = new PageStat
            {
                CourseID = SessionInfo.CourseID,
                UserID = SessionInfo.UserID.GetValueOrDefault(),
                PageID = SessionInfo.FlatCourseTree[SessionInfo.StepNumber].PageID,
                CorrectAnswerGiven = AnswerCorrectness ?? false
            };
            context.PageStats.Add(stat);
        }

        await context.SaveChangesAsync();

        AttemptNumber += 1;
        AnswerAttemptsLeft -= 1;

        SendingData = false;
    }


    private async Task ButtonOnClick()
    {
        await GoToNextStep.InvokeAsync();
    }
}
