@page "/TaskPage"
@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@inject IDbContextFactory<BlazorImpContext> DbFactory


<div class="main-container">
    <h2>@Header</h2>

    <p>@TaskText</p>

    @if (ShowAttemptCount)
    {
        <p style="color:red;">Wrong answer; attempts left: @AnswerAttemptsLeft</p>
    }

    <input type="text" disabled=@SendingData id="answer" name="answer" @bind=UserAnswer>

    @if (ProceedButtonEnabled)
    {
        <button type="button" @onclick=ButtonOnClick>Continue</button>
    }
    else
    {
        <button type="button" disabled=@SendingData @onclick=SendAnswer>Send answer</button>
    }
</div>

@code {
    //--------------------------------------------
    // Properties that map to UI elements directly
    //--------------------------------------------
    private string Header { get; set; } = "Task page";
    private string TaskText { get; set; } = "What is the answer?";
    private string UserAnswer { get; set; }

    //-------------------------------------
    // Properties that affect UI implicitly
    //-------------------------------------
    private int AnswerAttemptsLeft { get; set; } = 3;
    private bool ShowAttemptCount { get; set; } = false;
    private bool ProceedButtonEnabled { get; set; } = false;
    private bool SendingData { get; set; } = false;

    //-------------------------------------
    // Properties that are related to logic
    //-------------------------------------
    [Parameter]
    public TaskPageModel Model { get; set; }
    [Parameter]
    public SessionInfo SessionInfo { get; set; }
    [Parameter]
    public EventCallback<Task> GoToNextStep { get; set; }
    private int AttemptNumber { get; set; } = 1;
    private bool AnswerCorrectness { get; set; }

    private async Task SendAnswer()
    {
        if (AnswerAttemptsLeft <= 0)
        {
            return;
        }

        // TODO: This is smely code, find a fix
        SendingData = true;
        try
        {
            var context = DbFactory.CreateDbContext();

            if (!SessionInfo.UserID.HasValue)
            {
                throw new ArgumentException("UserID is empty on form submission");
            }

            // TODO: Eliminate potential race condition (what if the database has changed?)
            AnswerCorrectness = Model.RightAnswer == UserAnswer;

            // TODO: Find a way to make the cast explicitly throwing exception
            // as null UserID should never appear here, but is checked
            // in the code above instead of here
            TaskAttempt attempt = new TaskAttempt()
            {
                CourseID = SessionInfo.CourseID,
                TaskPageModelID = Model.TaskPageModelID,
                AttemptNumber = AttemptNumber,
                Answer = UserAnswer,
                Correct = AnswerCorrectness,
                UserID = SessionInfo.UserID.GetValueOrDefault(),
            };

            context.TaskAttempts.Add(attempt);
            await context.SaveChangesAsync();

            AttemptNumber += 1;
            AnswerAttemptsLeft -= 1;

            if (AnswerCorrectness || AnswerAttemptsLeft <= 0)
            {
                ProceedButtonEnabled = true;
            }
            if (!AnswerCorrectness)
            {
                ShowAttemptCount = true;
            }
        }
        finally
        {
            SendingData = false;
        }
    }


    private async Task ButtonOnClick()
    {
        await GoToNextStep.InvokeAsync();
    }
}
