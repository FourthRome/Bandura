@page "/SurveyPage"
@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@inject IDbContextFactory<BlazorImpContext> DbFactory

<div class="main-container">
    <h2>@Header</h2>

    <p>@MainText</p>

    <label class="vertical-label" for="answer">@Question</label>
    <input type="text" id="answer" name="answer" disabled=@SendingData @bind="@UserAnswer">
    <button type="button" disabled=@(SendingData || UserAnswer == "") @onclick="ButtonOnClick">Continue</button>
</div>
@code {
    //--------------------------------------------
    // Properties that map to UI elements directly
    //--------------------------------------------
    private string Header { get; set; } = "Survey page";
    private string MainText { get; set; } = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.";
    private string Question { get; set; } = "Question text?";
    private string UserAnswer { get; set; } = "";

    //-------------------------------------
    // Properties that affect UI implicitly
    //-------------------------------------
    private bool SendingData { get; set; } = false;

    //-------------------------------------
    // Properties that are related to logic
    //-------------------------------------
    [Parameter]
    public SurveyPageModel Model { get; set; }
    [Parameter]
    public SessionInfo SessionInfo { get; set; }
    [Parameter]
    public EventCallback<Task> GoToNextStep { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        // Map Model's data to UI
        Header = Model.Header;
        MainText = Model.MainText;
        Question = Model.Question;
        UserAnswer = "";
    }

    private async Task ButtonOnClick()
    {
        SendingData = true;

        // TODO: Replace this dirty hack with something more safe and manageable
        if (SessionInfo.StepNumber == 0)
        {
            SessionInfo.UserID = Convert.ToInt32(UserAnswer);
        }

        if (!SessionInfo.UserID.HasValue)
        {
            throw new ArgumentException("UserID is empty on form submission");
        }

        // TODO: Find a way to make the cast explicitly throwing exception
        // as null UserID should never appear here, but is checked
        // in the code above instead of here

        SurveyAnswer answer = new()
        {
            CourseID = SessionInfo.CourseID,
            SurveyPageModelID = Model.SurveyPageModelID,
            UserID = SessionInfo.UserID.GetValueOrDefault(),
            Answer = UserAnswer,
        };

        var context = DbFactory.CreateDbContext();
        context.SurveyAnswers.Add(answer);
        await context.SaveChangesAsync();

        // TODO: Replace this code duplication with something clearer
        if (SessionInfo.StepNumber == 0)
        {
            var page = await context.UserLastPages.Where(
                    p =>
                    p.CourseID == SessionInfo.CourseID &&
                    p.UserID == SessionInfo.UserID).FirstOrDefaultAsync();

            if (page != null)
            {
                // TODO: This is extremely terrible code!
                // Find a way to pass step number to the 'GoToNextStep' method instead
                SessionInfo.LastStepNumber = page.StepNumber;
                SessionInfo.StepNumber = page.StepNumber - 1;

                // TODO: And this is even worse...
                // How do I find a video page title to display at the contents menu?
                // And in what sourse file should it be done?
                var linksQuery = from step in context.Pages
                                 where step.CourseID == SessionInfo.CourseID
                                       && step.VideoPageModelID != null
                                       && step.StepNumber <= SessionInfo.LastStepNumber
                                 join video in context.VideoPageModels on step.VideoPageModelID equals video.VideoPageModelID into t
                                 from fullpage in t.DefaultIfEmpty()
                                 select fullpage.Header;

                foreach (string link in linksQuery)
                {
                    SessionInfo.NavLinksToShow.Add(link);
                }
            }
            else
            {
                // TODO: here we assume that UserID is not null already, which can change later.
                // Find a safer way to write this.
                UserLastPage lastPage = new()
                {
                    CourseID = SessionInfo.CourseID,
                    UserID = SessionInfo.UserID.GetValueOrDefault(),
                    StepNumber = 0,
                };

                context.UserLastPages.Add(lastPage);
                await context.SaveChangesAsync();
            }
        }

        await GoToNextStep.InvokeAsync();

        SendingData = false;
    }
}
