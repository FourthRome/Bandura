@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@inject IDbContextFactory<BlazorImpContext> DbFactory

<div class="page">
    <div class="sidebar">
        <NavMenu SessionInfo=@SessionInfo GoToPage=@GoToStep/>
    </div>

    <div class="main">
        <div class="content">
            @if (CourseID != null)
            {
                @switch (CurrentPageType)
                {
                    case PageType.InfoPage:
                        <BlazorImp.Pages.MinimalSequence.InfoPage Model=@InfoPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.SurveyPage:
                        <BlazorImp.Pages.MinimalSequence.SurveyPage Model=@SurveyPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.VideoPage:
                        <BlazorImp.Pages.MinimalSequence.VideoPage Model=@VideoPage GoToNextStep=@GoToNextStep GoToLastStep=@GoToLastStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.TaskPage:
                        <BlazorImp.Pages.MinimalSequence.TaskPage Model=@TaskPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.FinalPage:
                        <BlazorImp.Pages.MinimalSequence.FinalPage Model=@FinalPage SessionInfo=@SessionInfo />
                        break;
                    default:
                        <p>PageType is not specified</p>
                        break;
                }
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int CourseID { get; set; }
    [Parameter]
    public SessionInfo SessionInfo { get; set; }

    // TODO: I don't like this state machine approach, find a better way to
    // render the required component
    private PageType CurrentPageType { get; set; } = PageType.None;
    private InfoPageModel? InfoPage { get; set; }
    private SurveyPageModel? SurveyPage { get; set; }
    private VideoPageModel? VideoPage { get; set; }
    private TaskPageModel? TaskPage { get; set; }
    private FinalPageModel? FinalPage { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var context = DbFactory.CreateDbContext();

        UserLastPage lastPage = await context.UserLastPages.Where(
                p =>
                p.CourseID == SessionInfo.CourseID &&
                p.UserID == SessionInfo.UserID
                ).FirstOrDefaultAsync();

        if (lastPage != null)
        {
            // TODO: Is this redundant, or we do need both these fields?
            SessionInfo.LastStepNumber = lastPage.StepNumber;
            SessionInfo.StepNumber = lastPage.StepNumber;

            // TODO: Find out if this LINQ query can be simplified
            var menuItemsQuery = from step in context.Pages
                                 where step.CourseID == SessionInfo.CourseID
                                       && step.VideoPageModelID != null
                                       && step.StepNumber <= SessionInfo.LastStepNumber
                                 join video in context.VideoPageModels on step.VideoPageModelID equals video.VideoPageModelID into t
                                 from fullpage in t.DefaultIfEmpty()
                                 select new MenuItem { Caption = fullpage.Header, StepNumber = step.StepNumber };

            // TODO: Fix ordering (right now it's not guaranteed)
            // TODO: Probably add elements is not the greatest idea, check with several courses
            foreach (var item in menuItemsQuery)
            {
                SessionInfo.MenuItems.Add(item);
            }
        }
        else
        {
            lastPage = new()
            {
                CourseID = SessionInfo.CourseID,
                UserID = SessionInfo.UserID.GetValueOrDefault(),
                StepNumber = 0,
            };

            context.UserLastPages.Add(lastPage);
            await context.SaveChangesAsync();
        }

        await LoadCurrentStep();
    }

    protected async Task LoadCurrentStep()
    {
        using var context = DbFactory.CreateDbContext();

        var page = await context.Pages.Where(
            p =>
            p.CourseID == CourseID &&
            p.StepNumber == SessionInfo.StepNumber).FirstOrDefaultAsync();

        if (page != null)
        {
            CurrentPageType = page.PageType;

            switch (CurrentPageType)
            {
                case PageType.InfoPage:
                    InfoPage = await context.InfoPageModels.Where(
                        m => m.InfoPageModelID == page.InfoPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.SurveyPage:
                    SurveyPage = await context.SurveyPageModels.Where(
                        m => m.SurveyPageModelID == page.SurveyPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.VideoPage:
                    VideoPage = await context.VideoPageModels.Where(
                        m => m.VideoPageModelID == page.VideoPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.TaskPage:
                    TaskPage = await context.TaskPageModels.Where(
                        m => m.TaskPageModelID == page.TaskPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.FinalPage:
                    FinalPage = await context.FinalPageModels.Where(
                        m => m.FinalPageModelID == page.FinalPageModelID).FirstOrDefaultAsync();
                    break;
                default:
                    break;
            }
        }
    }

    public async Task GoToNextStep()
    {
        SessionInfo.StepNumber++;

        var context = DbFactory.CreateDbContext();
        var page = await context.UserLastPages.Where(
                p =>
                p.CourseID == SessionInfo.CourseID &&
                p.UserID == SessionInfo.UserID).FirstOrDefaultAsync();

        if (page != null && SessionInfo.StepNumber > page.StepNumber)
        {
            // TODO: get rid of this redundancy
            SessionInfo.LastStepNumber = SessionInfo.StepNumber;
            page.StepNumber = SessionInfo.StepNumber;
            await context.SaveChangesAsync();

            var newPage = await context.Pages.Where(
                p =>
                p.CourseID == SessionInfo.CourseID &&
                p.StepNumber == SessionInfo.StepNumber).FirstOrDefaultAsync();

            if (newPage.VideoPageModelID != null)
            {
                var videoPageModel = await context.VideoPageModels.Where(
                    v =>
                    v.VideoPageModelID == newPage.VideoPageModelID)
                    .FirstOrDefaultAsync();
                SessionInfo.MenuItems.Add(new MenuItem() { Caption = videoPageModel.Header, StepNumber = SessionInfo.StepNumber});
            }
        }

        await LoadCurrentStep();
    }

    public async Task GoToStep(int stepNumber)
    {
        SessionInfo.StepNumber = stepNumber;
        await LoadCurrentStep();
    }

    public async Task GoToLastStep()
    {
        SessionInfo.StepNumber = SessionInfo.LastStepNumber;
        await LoadCurrentStep();
    }
}
