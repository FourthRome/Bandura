@using Microsoft.EntityFrameworkCore
@using BlazorImp.Models
@inject IDbContextFactory<BlazorImpContext> DbFactory

<div class="page">
    <div class="sidebar">
        <NavMenu SessionInfo=@SessionInfo GoToPage=@GoToStep/>
    </div>

    <div class="main">
        <div class="content">
            @if (CourseID != null)
            {
                @switch (CurrentPageType)
                {
                    case PageType.InfoPage:
                        <BlazorImp.Pages.MinimalSequence.InfoPage Model=@InfoPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.SurveyPage:
                        <BlazorImp.Pages.MinimalSequence.SurveyPage Model=@SurveyPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.VideoPage:
                        <BlazorImp.Pages.MinimalSequence.VideoPage Model=@VideoPage GoToNextStep=@GoToNextStep GoToLastStep=@GoToLastStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.TaskPage:
                        <BlazorImp.Pages.MinimalSequence.TaskPage Model=@TaskPage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    case PageType.FinalPage:
                        <BlazorImp.Pages.MinimalSequence.FinalPage Model=@FinalPage SessionInfo=@SessionInfo />
                        break;
                    case PageType.ScorePage:
                        <BlazorImp.Pages.MinimalSequence.ScorePage GoToNextStep=@GoToNextStep SessionInfo=@SessionInfo />
                        break;
                    default:
                        <p>PageType is not specified</p>
                        break;
                }
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int CourseID { get; set; }
    [Parameter]
    public SessionInfo SessionInfo { get; set; }  // TODO: Find a way to make this dependency between element less obscure

    // TODO: I don't like this state machine approach, find a better way to
    // render the required component
    private PageType CurrentPageType { get; set; } = PageType.None;
    private InfoPageModel? InfoPage { get; set; }
    private SurveyPageModel? SurveyPage { get; set; }
    private VideoPageModel? VideoPage { get; set; }
    private TaskPageModel? TaskPage { get; set; }
    private FinalPageModel? FinalPage { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var context = DbFactory.CreateDbContext();

        // Logic for retrieving course structure
        await LoadCourseStructure();

        // Logic for loading last page
        UserLastPage lastPage = await context.UserLastPages.Where(
                p =>
                p.CourseID == SessionInfo.CourseID &&
                p.UserID == SessionInfo.UserID
                ).FirstOrDefaultAsync();

        // TODO: Can we make this less computationally expensive?
        // This line should never be executed at all, but I've seen
        // menu items duplicating, so there is to be some sort of extra
        // OnParametersSetAsync call
        SessionInfo.MenuItems = new List<MenuItem>();

        if (lastPage != null)
        {
            UserAction action = new UserAction
            {
                CourseID = SessionInfo.CourseID,
                UserID = SessionInfo.UserID.GetValueOrDefault(), // TODO: It's never really default; make that explicit
                DestinationPageID = SessionInfo.FlatCourseTree[lastPage.StepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
                Type = ActionType.GoToLastStep,
                Timestamp = DateTime.UtcNow,
                Message = $"Coming back to the last available page after logging in"
            };
            context.UserActions.Add(action);
            await context.SaveChangesAsync();

            // TODO: Is this redundant, or we do need both these fields?
            SessionInfo.LastStepNumber = lastPage.StepNumber;
            SessionInfo.StepNumber = lastPage.StepNumber;

            // TODO: Probably adding elements is not the greatest idea, check with several courses
            // TODO: This is probably very slow, refactor and introduce cache
            for (int stepNumber = 0; stepNumber <= SessionInfo.LastStepNumber; ++stepNumber)
            {
                //Page page = await context.Pages.Where(
                //        p =>
                //        p.PageID == SessionInfo.FlatCourseTree[stepNumber])
                //        .FirstAsync();

                // EXPERIMENT: Try to load the whole course structure at once, not just IDs
                Page page = SessionInfo.FlatCourseTree[stepNumber];

                if (page.PageType == PageType.VideoPage)
                {
                    VideoPageModel model = await context.VideoPageModels.Where(
                            m =>
                            m.VideoPageModelID == page.VideoPageModelID)
                            .FirstAsync();
                    SessionInfo.MenuItems.Add(new MenuItem { Caption=model.Header, StepNumber=stepNumber });
                }
            }
        }
        else
        {
            lastPage = new()
            {
                CourseID = SessionInfo.CourseID,
                UserID = SessionInfo.UserID.GetValueOrDefault(),
                StepNumber = 0,
            };

            context.UserLastPages.Add(lastPage);
            await context.SaveChangesAsync();
        }

        await LoadCurrentStep();
    }

    protected async Task LoadCurrentStep()
    {
        using var context = DbFactory.CreateDbContext();

        //var page = await context.Pages.Where(
        //        p =>
        //        p.PageID == SessionInfo.FlatCourseTree[SessionInfo.StepNumber])
        //        .FirstOrDefaultAsync();

        // EXPERIMENT: Try to load the whole course structure at once, not just IDs
        Page page = SessionInfo.FlatCourseTree[SessionInfo.StepNumber];


        if (page != null)
        {
            CurrentPageType = page.PageType;

            switch (CurrentPageType)
            {
                case PageType.InfoPage:
                    InfoPage = await context.InfoPageModels.Where(
                        m => m.InfoPageModelID == page.InfoPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.SurveyPage:
                    SurveyPage = await context.SurveyPageModels.Where(
                        m => m.SurveyPageModelID == page.SurveyPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.VideoPage:
                    VideoPage = await context.VideoPageModels.Where(
                        m => m.VideoPageModelID == page.VideoPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.TaskPage:
                    TaskPage = await context.TaskPageModels.Where(
                        m => m.TaskPageModelID == page.TaskPageModelID).FirstOrDefaultAsync();
                    break;
                case PageType.FinalPage:
                    FinalPage = await context.FinalPageModels.Where(
                        m => m.FinalPageModelID == page.FinalPageModelID).FirstOrDefaultAsync();
                    break;
                default:
                    break;
            }
        }
    }

    public async Task GoToNextStep()
    {
        var context = DbFactory.CreateDbContext();
        UserAction action = new UserAction
        {
            CourseID = SessionInfo.CourseID,
            UserID = SessionInfo.UserID.GetValueOrDefault(), // TODO: It's never really default; make that explicit
            SourcePageID = SessionInfo.FlatCourseTree[SessionInfo.StepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            DestinationPageID = SessionInfo.FlatCourseTree[SessionInfo.StepNumber + 1].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            Type = ActionType.GoToNextStep,
            Timestamp = DateTime.UtcNow,
            Message = $"Leaving the page, proceeding to the next"
        };
        context.UserActions.Add(action);
        await context.SaveChangesAsync();

        SessionInfo.StepNumber++;

        var page = await context.UserLastPages.Where(
                p =>
                p.CourseID == SessionInfo.CourseID &&
                p.UserID == SessionInfo.UserID)
                .FirstOrDefaultAsync();

        if (page != null && SessionInfo.StepNumber > page.StepNumber)
        {
            // TODO: get rid of this redundancy
            SessionInfo.LastStepNumber = SessionInfo.StepNumber;
            page.StepNumber = SessionInfo.StepNumber;
            await context.SaveChangesAsync();

            //var newPage = await context.Pages.Where(
            //    p =>
            //    p.PageID == SessionInfo.FlatCourseTree[SessionInfo.StepNumber])
            //    .FirstOrDefaultAsync();

            // EXPERIMENT: Try to load the whole course structure at once, not just IDs
            Page newPage = SessionInfo.FlatCourseTree[SessionInfo.StepNumber];

            if (newPage.VideoPageModelID != null)
            {
                var videoPageModel = await context.VideoPageModels.Where(
                    v =>
                    v.VideoPageModelID == newPage.VideoPageModelID)
                    .FirstOrDefaultAsync();
                SessionInfo.MenuItems.Add(new MenuItem { Caption = videoPageModel.Header, StepNumber = SessionInfo.StepNumber});
            }
        }

        await LoadCurrentStep();
    }

    public async Task GoToStep(int stepNumber)
    {
        var context = DbFactory.CreateDbContext();
        UserAction action = new UserAction
        {
            CourseID = SessionInfo.CourseID,
            UserID = SessionInfo.UserID.GetValueOrDefault(), // TODO: It's never really default; make that explicit
            SourcePageID = SessionInfo.FlatCourseTree[SessionInfo.StepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            DestinationPageID = SessionInfo.FlatCourseTree[stepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            Type = ActionType.GoToMaterial,
            Timestamp = DateTime.UtcNow,
            Message = $"Leaving the page to watch some material"
        };
        context.UserActions.Add(action);
        await context.SaveChangesAsync();

        SessionInfo.StepNumber = stepNumber;
        await LoadCurrentStep();
    }

    public async Task GoToLastStep()
    {
        var context = DbFactory.CreateDbContext();
        UserAction action = new UserAction
        {
            CourseID = SessionInfo.CourseID,
            UserID = SessionInfo.UserID.GetValueOrDefault(), // TODO: It's never really default; make that explicit
            SourcePageID = SessionInfo.FlatCourseTree[SessionInfo.StepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            DestinationPageID = SessionInfo.FlatCourseTree[SessionInfo.LastStepNumber].PageID,  // TODO: Introduce this functionality into SessionInfo directly
            Type = ActionType.GoToLastStep,
            Timestamp = DateTime.UtcNow,
            Message = $"Coming back to the last available page"
        };
        context.UserActions.Add(action);
        await context.SaveChangesAsync();

        SessionInfo.StepNumber = SessionInfo.LastStepNumber;
        await LoadCurrentStep();
    }

    public async Task LoadCourseStructure()
    {
        var context = DbFactory.CreateDbContext();

        // Course object with current ID
        var course = await context.Courses.Where(
                c =>
                c.CourseID == CourseID)
                .FirstAsync();

        // Root element of the course
        var courseRootSequence = await context.CourseSequences.Where(
                e =>
                e.CourseSequenceID == course.CourseSequenceID)
                .FirstAsync();

        // Initialize element tree (this part may become implicit)
        await courseRootSequence.LoadTreeFromDb(DbFactory);

        // Initialize flat course structure (required for navigation)
        await courseRootSequence.FillFlatCourseTree(SessionInfo.FlatCourseTree);

        SessionInfo.RootCourseSequence = courseRootSequence;
    }
}
