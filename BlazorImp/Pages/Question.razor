@using Newtonsoft.Json
@using Microsoft.EntityFrameworkCore
@using BlazorImp.Data
@using BlazorImp.Models
@using BlazorImp.CustomComponents

@inject IDbContextFactory<BlazorImpContext> DbFactory

<QuestionComponent Header="Header" Body="Body" />

<input placeholder="Напишите решение здесь" />
<button @onclick="SendAnswer" disabled="@(AttemptsLeft <= 0)">Ответить</button>
<p>@($"Осталось попыток: {AttemptsLeft}")</p>

@code {
    [Parameter]
    public Content Content { get; set; }

    // TODO: can I abstract all db-related logic into the parent component? Is it a good idea?
    [Parameter]
    public int UserID { get; set; }

    public string Header { get; set; }

    public string Body { get; set; }

    public int AttemptsLeft { get; set; }

    [Parameter]
    public string Answer { get; set; }


    protected override void OnParametersSet()
    {
        Dictionary<string, string> content = JsonConvert.DeserializeObject<Dictionary<string, string>>(Content.ContentJson);
        Header = content["Header"];
        Body = content["Body"];
    }

    public void SendAnswer()
    {
        AttemptsLeft -= 1;
    }

    protected override async Task OnInitializedAsync()
    {
        var context = DbFactory.CreateDbContext();

        var lastAttempt = await context.Attempt.Where(
            a => a.ContentID == Content.ContentID && a.UserID == UserID)
            ?.MaxAsync(a => a.AttemptNumber);
    }
}
