@using Newtonsoft.Json
@using Microsoft.EntityFrameworkCore
@using BlazorImp.Data
@using BlazorImp.Models
@using BlazorImp.CustomComponents

@inject IDbContextFactory<BlazorImpContext> DbFactory

<QuestionComponent Header="@Header" Body="@Body" />

<input placeholder="Напишите решение здесь" />
<button @onclick="SendAnswer" disabled="@(AttemptsLeft <= 0)">Ответить</button>
<p>@($"Осталось попыток: {AttemptsLeft}")</p>

@code {
    [Parameter]
    public string ContentJson { get; set; }

    // TODO: remove this leak of internal databases' structure
    [Parameter]
    public int ModuleID { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    // TODO: can I abstract all db-related logic into the parent component? Is it a good idea?
    [Parameter]
    public int UserID { get; set; }

    public string Header { get; set; }

    public string Body { get; set; }

    public int AttemptsLeft { get; set; }

    [Parameter]
    public string Answer { get; set; }


    protected override void OnParametersSet()
    {
        // TODO: Ok, now THIS does CERTAINLY not belong here
        // Find a proper way to refactor
        //-------------
        Dictionary<string, int> NumberOfAttempts = new()
        {
            { "train", 3 },
            { "test", 1 },
            { "limitless", 100 },
        };
        //-------------
        Dictionary<string, string> content = JsonConvert.DeserializeObject<Dictionary<string, string>>(ContentJson);
        Header = content["Header"];
        Body = content["Body"];
        AttemptsLeft = NumberOfAttempts[content["Type"]];

        var context = DbFactory.CreateDbContext();

        var lastAttempt = context.Attempt
            .Where(a => a.ModuleID == ModuleID && a.StepNumber == StepNumber && a.UserID == UserID)
            .OrderByDescending(a => a.AttemptNumber)
            .FirstOrDefault();

        if (lastAttempt != null)
        {
            AttemptsLeft -= lastAttempt.AttemptNumber;
        }
    }

    public void SendAnswer()
    {
        AttemptsLeft -= 1;
    }

    protected override async Task OnInitializedAsync()
    {


        Console.WriteLine("OnInitializedAsync");
    }
}
