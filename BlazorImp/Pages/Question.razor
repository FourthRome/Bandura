@using Newtonsoft.Json
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Logging 
@using System.ComponentModel.DataAnnotations 
@using BlazorImp.Data
@using BlazorImp.Models
@using BlazorImp.CustomComponents

@inject IDbContextFactory<BlazorImpContext> DbFactory
@inject ILogger<Question> Logger

<QuestionComponent Header="@Header" Body="@Body" />

<input placeholder="Напишите решение здесь" @bind="@UserAnswer"/>
<button @onclick="SendAnswer" disabled="@(AttemptsLeft <= 0 || Correct)">Ответить</button>
<p>@($"Осталось попыток: {AttemptsLeft}")</p>

@code {

    [Parameter]
    public string ContentJson { get; set; }

    public string UserAnswer { get; set; }

    // TODO: remove this leak of internal databases' structure
    [Parameter]
    public int ModuleID { get; set; }

    [Parameter]
    public int StepNumber { get; set; }

    // TODO: can I abstract all db-related logic into the parent component? Is it a good idea?
    [Parameter]
    public int UserID { get; set; }

    public string Header { get; set; }

    public string Body { get; set; }

    public int AttemptsLeft { get; set; }

    public int AttemptNumber { get; set; }

    public string RightAnswer { get; set; }

    [Parameter]
    public bool Correct { get; set; }


    protected override void OnParametersSet()
    {
        // TODO: Ok, now THIS does CERTAINLY not belong here
        // Find a proper way to refactor
        //-------------
        Dictionary<string, int> NumberOfAttempts = new()
        {
            { "train", 3 },
            { "test", 1 },
            { "limitless", 100 },
        };
        //-------------
        Dictionary<string, string> content = JsonConvert.DeserializeObject<Dictionary<string, string>>(ContentJson);
        Header = content["Header"];
        Body = content["Body"];
        AttemptsLeft = NumberOfAttempts[content["Type"]];
        RightAnswer = content["RightAnswer"]; // TODO: Terrible design, refactor ASAP

        var context = DbFactory.CreateDbContext();

        var lastAttempt = context.Attempt
            .Where(a => a.ModuleID == ModuleID && a.StepNumber == StepNumber && a.UserID == UserID)
            .OrderByDescending(a => a.AttemptNumber)
            .FirstOrDefault();

        if (lastAttempt != null)
        {
            AttemptNumber = lastAttempt.AttemptNumber;
            AttemptsLeft -= AttemptNumber;
            UserAnswer = lastAttempt.UserAnswer;
            Correct = lastAttempt.Correct;
        }
        else
        {
            AttemptNumber = 1;
            UserAnswer = "";
            Correct = false;
        }
    }

    public async Task SendAnswer()
    {
        var context = DbFactory.CreateDbContext();
        ValidateCorrectness();

        Attempt attempt = new()
        {
            ModuleID = ModuleID,
            StepNumber = StepNumber,
            UserID = UserID,
            AttemptNumber = AttemptNumber,
            UserAnswer = UserAnswer,
            Correct = Correct
        };
        context.Attempt.Add(attempt);
        await context.SaveChangesAsync();
        AttemptNumber += 1;
        AttemptsLeft -= 1;
    }

    public void ValidateCorrectness()
    {
        // TODO: Refactor this ASAP
        Correct = UserAnswer == RightAnswer;
    }

    protected override async Task OnInitializedAsync()
    {


        Console.WriteLine("OnInitializedAsync");
    }
}
